plugins {
    id 'java-base'
}

wrapper {
    gradleVersion = gradlewVersion
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    group = 'com.mjc.school'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        mavenCentral()
    }

    dependencies {

        implementation "org.springframework.boot:spring-boot-starter-web:$springstarterVersion" //version 3.1.3
        implementation "org.springframework.boot:spring-boot-starter-validation:$springstarterVersion"
        implementation "org.springframework.boot:spring-boot-starter-test:$springstarterVersion"
        implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
        implementation "org.springframework.boot:spring-boot-starter-data-jpa:2.7.7"

        compileOnly group: 'javax', name: 'javaee-api', version: '8.0.1'
        implementation group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.6.15.Final'

        compileOnly "org.projectlombok:lombok:$lombokVersion"// version 1.18.26
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        implementation group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: '0.2.0'

        testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiterVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiterVersion"
        testImplementation "com.tngtech.archunit:archunit-junit5:$archUnitVersion"
        testImplementation "com.tngtech.archunit:archunit:$archUnitVersion"

        annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
        implementation "org.mapstruct:mapstruct:$mapstructVersion"

        testImplementation 'org.assertj:assertj-core:3.24.2'
        testImplementation "com.h2database:h2:2.2.220"
        implementation "com.h2database:h2:2.2.220"

        testImplementation 'javax.servlet:javax.servlet-api:4.0.1'
        implementation 'javax.servlet.jsp.jstl:jstl-api:1.2'
    }
    test {
        useJUnitPlatform()
    }
}

task repack(type: Jar, dependsOn: ':module-main:build') {
    if (findProject(':module-main') != null) {
        entryCompression = ZipEntryCompression.STORED
        def buildJar = zipTree("${project(':module-main').buildDir}/libs/module-main.jar")
        from(buildJar) { into('/') }
        manifest {
            attributes(
                    'Main-Class': 'com.mjc.school.Main'
            )
        }
    }
}